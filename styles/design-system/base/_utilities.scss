@each $suffix in ('left', 'center', 'right') {

  %text-#{$suffix},
  .text-#{$suffix} {
    text-align: unquote($suffix) !important;
  }
}

%text-nowrap,
.text-nowrap {
  white-space: nowrap;
}

%text-wrap,
.text-wrap {
  white-space: pre-wrap;
}

%text-truncate,
.text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

%text-uppercase,
.text-uppercase {
  text-transform: uppercase;
}

%text-capitalize,
.text-capitalize {
  text-transform: capitalize; 

  &::first-letter {
    text-transform: capitalize;
  }
}

%text-lowercase,
.text-lowercase {
  text-transform: lowercase;
}

%text-decoration-none,
.text-decoration-none {
  text-decoration: none;
}

@each $class, $value in ("visible" "visible", "invisible" "hidden") {
  %#{$class},
  .#{$class} {
    visibility: unquote($value);
  }
}

@each $cursor in ('pointer', 'help', 'wait', 'crosshair', 'not-allowed', 'zoom-in', 'zoom-out', 'grab') {

  %cursor-#{$cursor},
  .cursor-#{$cursor} {
    cursor: unquote($cursor);
  }
}

@each $suffix in ('inline-block', 'block', 'none') {

  %display-#{$suffix},
  .display-#{$suffix} {
    display: #{$suffix};
  }
}

@each $suffix in ('', '-top', '-bottom', '-right', '-left') {

  %border#{$suffix},
  .border#{$suffix} {
    border#{$suffix}: 1px solid $primary-900;
  }
}

.border-none {
  border: none;
}

@each $position in ('', '-top-left', '-top-right', '-bottom-left', '-bottom-right', '-top', '-bottom') {

  @each $suffix,
  $radius in (''50%, '-xs'$radius-xs, '-sm'$radius-sm, '-md'$radius-md, '-lg'$radius-lg, '-xl'$radius-xl) {

    %rounded#{$position}#{$suffix},
    .rounded#{$position}#{$suffix} {
      @if ($position=="-top") or ($position=="-bottom") {
        border#{$position}-left-radius: $radius;
        border#{$position}-right-radius: $radius;
      }

      @else {
        border#{$position}-radius: $radius;
      }
    }
  }
}

%list-reset,
.list-reset {
  margin: 0;
  padding: 0;
  list-style-type: none;
}

%btn-reset,
.btn-reset {
  margin: 0;
  padding: 0;
  outline: none;
  border: none;
  background: none;
}

@each $axis in ('-x', '-y', '') {
  @include overflow-classes($axis);
}

@each $position in ("absolute", "static", "relative", "fixed", "sticky") {

  %#{$position},
  .#{$position} {
    position: unquote($position);
  }
}

@each $shadow in $shadows {
  %shadow-#{$shadow},
  .shadow-#{$shadow} {
    @include box($shadow, $primary-900);
  }
}

@media print {
  .hide-print:not(.show-print):not(.show) {
    display: none !important;
  }
}

@for $i from 1 through 10 {
  %line-clamp-#{$i},
  .line-clamp-#{$i} {
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: #{$i};
    -webkit-box-orient: vertical;
  }
}

.break-word {
  word-break: break-word;
}